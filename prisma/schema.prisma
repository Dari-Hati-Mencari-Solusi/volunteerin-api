generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid()) @db.Uuid()
  name          String         @db.VarChar(125)
  email         String         @unique @db.VarChar(50)
  phoneNumber   String?        @unique @map("phone_number") @db.VarChar(20)
  password      String?        @db.VarChar
  socialId      String?        @map("social_id") @db.VarChar
  role          Roles          @default(VOLUNTEER)
  avatarImageId String?        @map("avatar_image_id")
  avatarUrl     String?        @map("avatar_url") @db.VarChar
  loginProvider LoginProviders @default(LOCAL) @map("login_provider")
  isSubscribed  Boolean        @default(false) @map("is_subcribed")
  rememberToken String?        @map("remember_token") @db.VarChar

  lastLoginAt DateTime? @map("last_login_at")
  verifiedAt  DateTime? @map("verified_at")
  deletedAt   DateTime? @map("deleted_at")
  createdAt   DateTime? @map("created_at")
  updatedAt   DateTime? @default(now()) @map("updated_at")

  profile        UserProfile?
  location       UserLocation?
  partner        PartnerProfile?
  events         Event[]
  participations Participant[]
  notifications  Notification[]
  bookmarkEvents UserSavedEvent[]
  benefits       Benefit[]
  forms          FormResponse[]

  @@map("users")
}

model UserProfile {
  id     String  @id @default(uuid()) @db.Uuid
  userId String  @unique @map("user_id") @db.Uuid
  cv     String? @db.VarChar

  createdAt DateTime? @map("created_at")
  updatedAt DateTime? @default(now()) @map("updated_at")

  user User @relation(fields: [userId], references: [id])

  @@map("user_profiles")
}

model PartnerProfile {
  id                  String            @id @default(uuid()) @db.Uuid
  userId              String            @unique @map("user_id") @db.Uuid
  organizationType    OrganizationTypes @map("organization_type")
  organizationAddress String            @map("organization_address") @db.Text
  instagram           String            @db.VarChar(50)
  eventQuota          Int?              @default(1) @map("event_quota")
  status              PartnerStatus     @default(REVIEWED)
  information         String?           @db.Text
  createdAt           DateTime?         @map("created_at")
  updatedAt           DateTime?         @default(now()) @map("updated_at")

  user               User               @relation(fields: [userId], references: [id])
  responsiblePersons ResponsiblePerson?
  legality           Legality?

  @@map("partner_profiles")
}

model UserLocation {
  id        String  @id @default(uuid()) @db.Uuid
  userId    String  @unique @map("user_id") @db.Uuid
  location  String
  latitude  Decimal @db.Decimal(10, 8)
  longitude Decimal @db.Decimal(11, 8)

  createdAt DateTime? @map("created_at")
  updatedAt DateTime? @default(now()) @map("updated_at")

  user User @relation(fields: [userId], references: [id])

  @@map("user_locations")
}

model ResponsiblePerson {
  id               String    @id @default(uuid()) @db.Uuid
  partnerProfileId String    @unique @map("partner_profile_id") @db.Uuid
  nik              String    @db.VarChar(30)
  fullName         String    @map("full_name") @db.VarChar(125)
  phoneNumber      String    @map("phone_number") @db.VarChar(20)
  position         String    @db.VarChar(50)
  ktpImageId       String?   @map("ktp_image_id")
  ktpUrl           String    @map("ktp_url") @db.VarChar
  createdAt        DateTime? @map("created_at")
  updatedAt        DateTime? @default(now()) @map("updated_at")

  partnerProfile PartnerProfile @relation(fields: [partnerProfileId], references: [id])

  @@map("responsible_persons")
}

model Legality {
  id               String @id @default(uuid()) @db.Uuid
  partnerProfileId String @unique @map("partner_profile_id") @db.Uuid

  documentName    String  @map("document_name")
  documentImageId String? @map("document_image_id")
  documentUrl     String  @map("document_url")
  information     String? @db.Text

  createdAt DateTime? @map("created_at")
  updatedAt DateTime? @default(now()) @map("updated_at")

  partnerProfile PartnerProfile @relation(fields: [partnerProfileId], references: [id])

  @@map("legalities")
}

model Event {
  id            String    @id @default(uuid()) @db.Uuid
  userId        String    @map("user_id") @db.Uuid
  title         String    @db.VarChar(100)
  slug          String    @db.VarChar(100)
  type          EventType @default(OPEN)
  description   String    @db.Text
  requirement   String    @map("terms_and_conditions") @db.Text
  contactPerson String    @map("contact_person") @db.VarChar(15)

  maxApplicant  Int? @map("max_applicant")
  acceptedQuota Int? @map("accepted_quota")

  startAt DateTime  @map("start_at")
  endAt   DateTime? @map("end_at")

  isPaid Boolean? @default(false) @map("is_paid")
  price  Decimal? @default(0) @db.Decimal(12, 2)

  province  String   @db.VarChar(50)
  regency   String   @db.VarChar(50)
  address   String?
  gmaps     String?
  latitude  Decimal? @db.Decimal(10, 8)
  longitude Decimal? @db.Decimal(11, 8)

  bannerImageId String?   @map("banner_image_id")
  bannerUrl     String    @map("banner_url")
  isRelease     Boolean   @default(false) @map("is_release")
  createdAt     DateTime? @map("created_at")
  updatedAt     DateTime? @default(now()) @map("updated_at")

  user            User             @relation(fields: [userId], references: [id])
  categories      Category[]
  userSavedEvents UserSavedEvent[]
  participations  Participant[]
  forms           Form[]
  benefits        Benefit[]

  @@index([title])
  @@map("events")
}

model Category {
  id          String    @id @default(uuid()) @db.Uuid
  name        String    @unique @db.VarChar(40)
  description String?   @db.Text
  createdAt   DateTime? @map("created_at")
  updatedAt   DateTime? @default(now()) @map("updated_at")

  events Event[]

  @@map("categories")
}

model UserSavedEvent {
  id      String @id @default(uuid()) @db.Uuid
  userId  String @map("user_id") @db.Uuid
  eventId String @map("event_id") @db.Uuid

  createdAt DateTime? @map("created_at")
  updatedAt DateTime? @default(now()) @map("updated_at")

  user  User  @relation(fields: [userId], references: [id])
  event Event @relation(fields: [eventId], references: [id])

  @@map("user_saved_events")
}

model Benefit {
  id          String  @id @default(uuid()) @db.Uuid
  userId      String  @map("user_id") @db.Uuid
  name        String  @db.VarChar(20)
  icon        String  @db.VarChar(20)
  description String?

  createdAt DateTime? @map("created_at")
  updatedAt DateTime? @default(now()) @map("updated_at")

  user   User    @relation(fields: [userId], references: [id])
  events Event[]

  @@map("benefits")
}

model Participant {
  id          String            @id @default(uuid()) @db.Uuid
  userId      String            @map("user_id") @db.Uuid
  eventId     String            @map("event_id") @db.Uuid
  formResponseId String @unique @map("form_response_id") @db.Uuid
  completedAt DateTime?         @map("completed_at")
  createdAt   DateTime?         @map("created_at")
  updatedAt   DateTime?         @default(now()) @map("updated_at")

  user  User  @relation(fields: [userId], references: [id])
  event Event @relation(fields: [eventId], references: [id])
  formResponse FormResponse @relation(fields: [formResponseId], references: [id])
  

  @@map("participants")
}

model Form {
  id      String @id @default(uuid()) @db.Uuid
  eventId String @map("event_id") @db.Uuid
  content Json   @db.JsonB

  createdAt DateTime? @map("created_at")
  updatedAt DateTime? @default(now()) @map("updated_at")

  event        Event          @relation(fields: [eventId], references: [id])
  formResposes FormResponse[]

  @@map("forms")
}

model FormResponse {
  id      String @id @default(uuid()) @db.Uuid
  formId  String @map("form_id") @db.Uuid
  userId  String @map("user_id") @db.Uuid
  answers Json   @db.JsonB
  status      RegistrantStatus @default(REVIEWED)

  submittedAt DateTime? @map("submitted_at")
  updatedAt   DateTime? @default(now()) @map("updated_at")

  form Form @relation(fields: [formId], references: [id])
  user User @relation(fields: [userId], references: [id])
  participant Participant?

  @@map("form_responses")
}

model Notification {
  id        String            @id @default(uuid()) @db.Uuid
  userId    String            @map("user_id") @db.Uuid
  content   String            @db.Text
  type      NotificationTypes
  url       String?           @db.VarChar
  createdAt DateTime?         @map("created_at")
  updatedAt DateTime?         @default(now()) @map("updated_at")
  user      User              @relation(fields: [userId], references: [id])

  @@map("notifications")
}

enum LoginProviders {
  LOCAL
  GOOGLE
  FACEBOOK
}

enum Roles {
  ADMIN
  VOLUNTEER
  PARTNER
}

enum OrganizationTypes {
  COMMUNITY
  GOVERNMENT
  CORPORATE
  INDIVIDUAL
}

enum NotificationTypes {
  REMINDER
  EVENT_UPDATE
  EVENT_LAUNCHING
  CUSTOM
}

enum CommentReportStatus {
  REVIEWED
  DISMISSED
  APPROVED
}

enum RegistrantStatus {
  REVIEWED
  ACCEPTED
  REJECTED
}

enum PartnerStatus {
  REVIEWED
  ACCEPTED_PROFILE
  ACCEPTED_LEGALITY
  REJECTED_PROFILE
  REJECTED_LEGALITY
}

enum EventType {
  OPEN
  LIMITED
}
