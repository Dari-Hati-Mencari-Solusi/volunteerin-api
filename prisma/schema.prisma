generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())  
  name          String         @db.VarChar(125)
  email         String         @unique @db.VarChar(50)
  phoneNumber   String?        @unique @map("phone_number") @db.VarChar(20)
  password      String?        @db.VarChar
  socialId      String?        @map("social_id") @db.VarChar
  role          Roles          @default(VOLUNTEER)
  avatarUrl     String?        @map("avatar_url") @db.VarChar
  loginProvider LoginProviders @default(LOCAL) @map("login_provider")
  isSubscribed  Boolean        @default(false) @map("is_subcribed")
  rememberToken String?        @map("remember_token") @db.VarChar
  lastLoginAt   DateTime?      @map("last_login_at")
  verifiedAt    DateTime?      @map("verified_at")
  deletedAt     DateTime?      @map("deleted_at")
  createdAt     DateTime?      @map("created_at")
  updatedAt     DateTime       @default(now()) @map("updated_at")

  profile        UserProfile?  
  location       UserLocation?
  partner        PartnerProfile?
  events         Event[]
  participations Participation[]
  notifications  Notification[]
  comments       Comment[]
  reports        CommentReport[]
  bookmarkEvents UserSavedEvent[]

  @@map("users")
}

model UserProfile {
  id     Int     @id @default(autoincrement())  
  userId Int     @unique @map("user_id")
  cv     String? @db.VarChar

  user User @relation(fields: [userId], references: [id])

  @@map("user_profiles")
}

model PartnerProfile {
  id                  Int               @id @default(autoincrement())  
  userId              Int               @unique @map("user_id")
  organizationType    OrganizationTypes @map("organization_type")
  organizationAddress String            @map("organization_address") @db.Text
  instagram           String            @db.VarChar(50)
  eventQuota          Int               @default(1) @map("event_quota")
  status              PartnerStatus     @default(REVIEWED)
  information         String?           @db.Text
  createdAt           DateTime?         @map("created_at")
  updatedAt           DateTime          @default(now()) @map("updated_at")

  user               User               @relation(fields: [userId], references: [id])
  responsiblePersons ResponsiblePerson?

  @@map("partner_profiles")
}

model UserLocation {
  id        Int      @id @default(autoincrement())  
  userId    Int      @unique @map("user_id")
  location  String
  latitude  Decimal  @db.Decimal(10, 8)
  longitude Decimal  @db.Decimal(11, 8)
  updatedAt DateTime @default(now()) @map("updated_at")

  user User @relation(fields: [userId], references: [id])

  @@map("user_locations")
}

model ResponsiblePerson {
  id               Int       @id @default(autoincrement())  
  partnerProfileId Int       @unique @map("partner_profile_id")
  nik              String    @unique @db.VarChar(30)
  fullName         String    @map("full_name") @db.VarChar(125)
  phoneNumber      String    @map("phone_number") @db.VarChar(20)
  position         String    @db.VarChar(50)
  ktpUrl           String    @map("ktp_url") @db.VarChar
  createdAt        DateTime? @map("created_at")
  updatedAt        DateTime  @default(now()) @map("updated_at")

  partnerProfile PartnerProfile @relation(fields: [partnerProfileId], references: [id])

  @@map("responsible_persons")
}

model Event {
  id                 Int       @id @default(autoincrement())  
  userId             Int       @unique @map("user_id")
  title              String    @db.VarChar(100)
  startAt            DateTime  @map("start_at")
  endAt              DateTime? @map("end_at")
  bannerUrl          String    @map("banner_url")
  description        String    @db.Text
  termsAndConditions String?   @map("terms_and_conditions") @db.Text
  isRelease          Boolean   @default(false) @map("is_release")
  contactPerson      String    @map("contact_person") @db.VarChar(15)
  location           String
  latitude           Decimal   @db.Decimal(10, 8)
  longitude          Decimal   @db.Decimal(11, 8)
  createdAt          DateTime? @map("created_at")
  updatedAt          DateTime  @default(now()) @map("updated_at")

  user            User             @relation(fields: [userId], references: [id])
  categories      Category[]
  userSavedEvents UserSavedEvent[]
  comments        Comment[]
  participations  Participation[]
  
  @@index([title])
  @@map("events")
}

model Category {
  id          Int       @id @default(autoincrement())  
  name        String    @unique @db.VarChar(40)
  description String?   @db.Text
  createdAt   DateTime? @map("created_at")
  updatedAt   DateTime  @default(now()) @map("updated_at")

  events Event[]

  @@map("categories")
}

model UserSavedEvent {
  id        Int       @id @default(autoincrement())  
  userId    Int       @map("user_id")
  eventId   Int       @map("event_id")
  createdAt DateTime? @map("created_at")
  updatedAt DateTime  @default(now()) @map("updated_at")

  user  User  @relation(fields: [userId], references: [id])
  event Event @relation(fields: [eventId], references: [id])

  @@map("user_saved_events")
}

model Comment {
  id        Int       @id @default(autoincrement())  
  userId    Int       @map("user_id")
  eventId   Int       @map("event_id")
  content   String    @db.Text
  createdAt DateTime? @map("created_at")
  updatedAt DateTime  @default(now()) @map("updated_at")

  user    User            @relation(fields: [userId], references: [id])
  event   Event           @relation(fields: [eventId], references: [id])
  reports CommentReport[]

  @@map("comments")
}

model CommentReport {
  id         Int                 @id @default(autoincrement())  
  commentId  Int                 @map("comment_id")
  reportedBy Int                 @map("reported_by")
  reason     String              @db.Text
  status     CommentReportStatus @default(REVIEWED)
  reviewedAt DateTime?           @map("reviewed_at")
  createdAt  DateTime?           @map("created_at")
  updatedAt  DateTime            @default(now()) @map("updated_at")

  comment        Comment @relation(fields: [commentId], references: [id])
  reportedByUser User    @relation(fields: [reportedBy], references: [id])

  @@map("comment_reports")
}

model Participation {
  id                  Int                 @id @default(autoincrement())  
  userId              Int                 @map("user_id")
  eventId             Int                 @map("event_id")
  participationStatus ParticipationStatus @default(REVIEWED) @map("participation_status")
  completedAt         DateTime?           @map("completed_at")
  createdAt           DateTime?           @map("created_at")
  updatedAt           DateTime            @default(now()) @map("updated_at")

  user  User  @relation(fields: [userId], references: [id])
  event Event @relation(fields: [eventId], references: [id])

  @@map("participations")
}

model Notification {
  id        Int               @id @default(autoincrement())  
  userId    Int               @map("user_id")
  content   String            @db.Text
  type      NotificationTypes
  url       String?           @db.VarChar
  createdAt DateTime?         @map("created_at")
  updatedAt DateTime          @default(now()) @map("updated_at")
  user      User              @relation(fields: [userId], references: [id])

  @@map("notifications")
}

enum LoginProviders {
  LOCAL
  GOOGLE
  FACEBOOK
}

enum Roles {
  ADMIN  
  VOLUNTEER
  PARTNER
}

enum OrganizationTypes {
  COMMUNITY
  GOVERNMENT
  CORPORATE
  INDIVIDUAL
}

enum NotificationTypes {
  REMINDER
  EVENT_UPDATE
  EVENT_LAUNCHING
  CUSTOM
}

enum CommentReportStatus {
  REVIEWED
  DISMISSED
  APPROVED
}

enum ParticipationStatus {
  REVIEWED
  JOINED
  ACCEPTED
  COMPLETED
  REJECTED
  FINISHED
}

enum PartnerStatus {
  REVIEWED
  ACCEPTED
  REJECTED
}